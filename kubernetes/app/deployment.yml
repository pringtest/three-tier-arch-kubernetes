# create amazon-cloudwatch namespace
apiVersion: v1
kind: Namespace
metadata:
  name: lab
  labels:
    name: lab
    
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: lab-api-deployment
  labels:
    app: lab-app
  namespace: lab
spec:
  replicas: 1
  selector:
    matchLabels:
      app: lab-app
  template:
    metadata:
      labels:
        app: lab-app
    spec:
      containers:
        - name: lab-api
          image: 396460956865.dkr.ecr.ap-southeast-2.amazonaws.com/demo-api-server:v1.0
          imagePullPolicy: Always
          ports:
            - containerPort: 3000

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: lab-web-deployment
  labels:
    app: lab-app
  namespace: lab
spec:
  replicas: 1
  selector:
    matchLabels:
      app: lab-app
  template:
    metadata:
      labels:
        app: lab-app
    spec:
      containers:
        - name: lab-web
          image: 396460956865.dkr.ecr.ap-southeast-2.amazonaws.com/demo-web-server:v2.0@sha256:11a6dcb7229e29a2d6bd01c4d9058ecdd74e4344c34f301ae59952f91bac5f12
          imagePullPolicy: Always
          ports:
            - containerPort: 80

# ---
# apiVersion: v1
# kind: Service
# metadata:
#   annotations:
#     service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
#     service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: 'true'
#     service.beta.kubernetes.io/aws-load-balancer-type: nlb
#   name: lab-service
#   labels:
#     app: lab-app
#   namespace: lab
# spec:
#   selector:
#     app: lab-app
#   type: LoadBalancer
#   externalTrafficPolicy: Local
#   ports:
#     - port: 80
#       targetPort: 3000
#       protocol: TCP

---
apiVersion: v1
kind: Service
metadata:
  name: lab-api-service
  labels:
    app: lab-app
  namespace: lab
spec:
  ports:
    - port: 3000
      protocol: TCP
  selector:
    app: lab-app

---
apiVersion: v1
kind: Service
metadata:
  name: lab-web-service
  labels:
    app: lab-app
  namespace: lab
spec:
  ports:
    - port: 80
      protocol: TCP
  selector:
    app: lab-app

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: lab-app-ingress
  namespace: lab
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    # nginx.ingress.kubernetes.io/enable-opentracing: "true"
    # # Health Check Settings
    # alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    # alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    # alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    # alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    # alb.ingress.kubernetes.io/success-codes: '200'
    # alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    # alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'
spec:
  # tls:
  #   - hosts:
  #       - anthonycornell.com
  #     secretName: tls-secret
  rules:
    - http:
        paths:
          - path: /lab-api/dev(/|$)(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: lab-api-service
                port:
                  number: 3000
          - path: /lab-web/dev(/|$)(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: lab-web-service
                port:
                  number: 80
      # host: anthonycornell.com