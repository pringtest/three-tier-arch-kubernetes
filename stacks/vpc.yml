AWSTemplateFormatVersion: '2010-09-09'
Description: 'VPC - Public only'

Parameters:
  Project:
    Type: String
  NodeEnv:
    Type: String
  VpcBlock: # The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR range.
    Type: String
    Default: 192.168.0.0/16
  PublicSubnet01Block: # CidrBlock for public subnet 01 within the VPC
    Type: String
    Default: 192.168.0.0/18
  PublicSubnet02Block: # CidrBlock for public subnet 02 within the VPC
    Type: String
    Default: 192.168.64.0/18

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Worker Network Configuration"
        Parameters:
          - VpcBlock
          - PublicSubnet01Block
          - PublicSubnet02Block
          - PrivateSubnet01Block
          - PrivateSubnet02Block

Mappings:
  ServiceNamePrefixMap:
    aws:
      Name: com.amazonaws
    aws-cn:
      Name: cn.com.amazonaws
    aws-us-gov:
      Name: com.amazonaws

Resources:
  # create VPC, this will also create route table, network ACL, Security Group
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${NodeEnv}-${Project}-vpc'

  # create internet gateway
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties: 
      Tags: 
        - Key: Name
          Value: !Sub '${NodeEnv}-${Project}-internet-gateway'

  # attach internet gateway to VPC
  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  
  # create route table for public subnet
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${NodeEnv}-${Project}-public-subnets'
      - Key: Network
        Value: Public
  
  # create public subnet
  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Public Subnet 01
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
      CidrBlock:
        Ref: PublicSubnet01Block
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${NodeEnv}-${Project}-public-subnet-01"
        - Key: kubernetes.io/role/elb
          Value: 1
  
  # create public subnet
  PublicSubnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Public Subnet 02
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 1
        - !GetAZs 
          Ref: 'AWS::Region'
      CidrBlock:
        Ref: PublicSubnet02Block
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${NodeEnv}-${Project}-public-subnet-02"
        - Key: kubernetes.io/role/elb
          Value: 1

  # 2 public subnet connect to 1 route table
  PublicSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet01
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet02
      RouteTableId: !Ref PublicRouteTable

  # connect public route table to internet gateway
  PublicRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  
Outputs:
  PublicSubnet01Id:
    Value: !Ref PublicSubnet01
  PublicSubnet02Id:
    Value: !Ref PublicSubnet02
